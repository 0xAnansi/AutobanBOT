# ======
# Points
# ======

# When a user has this many points, the bot will take action.
point_threshold = 100

# How many points does each removal cost?
# For example:
#   point_config = [
#       {id="Some removal reason title", points=3, expires=2},
#       {id="Another one", points=0}
#   ]
# The ID of a removal reason must be its exact title.
# You can optionally set a different expiration time (in months) for each removal reason;
# If you don't it will use the default from below.
point_config = [
    ## Points mapping
    ### Manual / faults
    ### Manual / Spam or annoyances
    ### Automod
    ### Default
    {id="remove", points=5}
]

# Number of months before a removal is forgiven and wiped from the record.
# Set to 0 to never expire.
expiration_months = 24

# What should the bot do when a user passes the point threshold?
# 1: notify the mods
# 2: autoban and notify the mods
# 3: autoban silently
autoban_mode = 1

# =======================================================
# Auto ban feature options
# =======================================================
# Subs where a user posts that should trigger an action
# Potential actions : ban, watch, report, modalert
# For example:
#   monitored_subs = [
#       {id="temu", action="ban", label="BOT_BAN", note="TEMU bot"},
#       {id="PCM", action="watch", label="SPAM_WATCH", note="Posts in xxx"}
#   ]
# Ban will trigger a ban instantly
# Watch will only add a modnote
# Report will report the comment to put it in the modqueue since filter is not available through the API
# Modalert will send a modmail linking to the message with the reason being what is specified in "note"
# more info here https://praw.readthedocs.io/en/stable/code_overview/other/mod_note.html
# Default values for label depends on action, it will fallback to BOT_BAN or SPAM_WATCH
# Default value for note will be : Posts in <subreddit>
monitored_subs = [
    # Bans
    ## TEMU
    {id="temu", action="ban", label="BOT_BAN", note="TEMU bot"},
    {id="temumethods", action="ban", label="BOT_BAN", note="TEMU bot"},
    {id="TEMU_Official", action="ban", label="BOT_BAN", note="TEMU bot"},
    {id="TemuAustralia", action="ban", label="BOT_BAN", note="TEMU bot"},
    {id="TemuHelp", action="ban", label="BOT_BAN", note="TEMU bot"},
    {id="TEMU_Canada", action="ban", label="BOT_BAN", note="TEMU bot"},
    {id="TemuDropshipping", action="ban", label="BOT_BAN", note="TEMU bot"},
    {id="Temu_referral_help", action="ban", label="BOT_BAN", note="TEMU bot"},
    ## Free karma subs
    {id="FreeKarma4All", action="ban", label="BOT_BAN", note="Karma farm"},
    {id="GetKarma_Here", action="ban", label="BOT_BAN", note="Karma farm"},
    {id="needkarma", action="ban", label="BOT_BAN", note="Karma farm"},
    # Watch
    ## XXX
]
# =======================================================
# Poll feature options
# =======================================================
# Threads that are actually polls the bot should monitor results for
# For example:
#   polls = [
#       {thread_id="149bxnl", options=["Option 1", "Option 2", "Option 3"], min_account_age="3m", name="The pollest poll of all polls", duration="2d"},
#   ]
# thread_id should be the id of the thread to monitor
# options should be the list of choices in the poll
# min_account_age (optionnal) can be used to eliminate answers from accounts newer than the given period. Format is [number][d|w|m|y] which resolves to number*1, 7, 30 or 365 days repectively
## Note that I strongly advise setting the thread restriction at the automod level instead of the bot, due to the more flexibility it offers
# name (optionnal) is the name of the poll displayed in the tally message of the bot in the thread
# duration (optionnal) is the time given to users to vote from the creation of the thread. Format is [number][h|d|w|m|y] which resolves to number* hour, day, week, month and year repectively
polls = []

#constant_polling = [
#        {
#        thread_id = "default",
#        # Account requirements
#        min_acc_age = 180,
#        min_comments = 25,
#        # Poll options
#        valid_options = ["Populaire", "Impopulaire", "Pas une opinion"],
#        check_level = "first",
#        threshold_percent = 66,
#        action = "lock"
#    },
#]

# Users the rules will not apply to. Won't be flagged by any of the actions linked to subreddits setup above
trusted_users = []
# =======================================================
# ADVANCED SETTINGS BELOW HERE
# (Don't change these unless you want something specific)
# =======================================================

# =====
# Modes
# =====

# Dry run mode - if you want to test DRBOT without affecting your sub.
# It won't take any actions on Reddit and will log what it would have done instead.
dry_run = false

# Safe mode - do greedy safety checks instead of lazy ones.
# e.g. check for comment re-approval on every operation instead of only periodically and when needed.
# Will significantly slow down the bot and increase the traffic from your bot to reddit.
safe_mode = false

# By default, the bot will not ban mods or track their points.
# You can force it to include mods by setting this to false.
# This may cause permissions issues with your sub - mods can't always ban other mods.
exclude_mods = true

# You can make exceptions for individual removals and give them custom point values
# by putting the point number inside square brackets anywhere in the mod note of the removal, like this:
#   [0]
# This lets you make special exceptions to not count a removal as a strike against a user
# or give extra points for a removal.
# This requires extra requests though, which slows down the bot, so you can turn it off here.
# (If safe mode is active then these requests already happen, so this won't slow things down.)
custom_point_mod_notes = true

# The first time you run DRBOT, should it look at previous modlog entries retroactively,
# or start fresh from the current moment?
# This setting only affects the first time you run DRBOT.
# If you turn this on, the first run of DRBOT might take a long time.
first_time_retroactive_modlog = false


# =========
# Messaging
# =========

# When modmailing you, truncate long comments to this many characters (or set to 0 to disable truncation).
# Warning: if you set this too high, the message may go over the character limit.
modmail_truncate_len = 100

# Whether to send modmail when self-moderation is detected (otherwise it's just logged).
self_moderation_modmail = false

# Whether to send modmail when admin action is detected (otherwise it's just logged).
admin_modmail = true
